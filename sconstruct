#!/usr/bin/scons

import os, sys

prefix = ARGUMENTS.get("PREFIX", "")
python_version = 'python%d.%d' % sys.version_info[:2]

env = Environment(
    CXXFLAGS=os.environ.get('CXXFLAGS', '').split(' '),
    LIBPATH=os.environ.get('LIBPATH', '').split(' '))
env.Alias("install", '.')
env.Append(CXXFLAGS = ["-g", "-O2", "-Wall", "-pthread", "-rdynamic"])

# JSON parser
json = env.StaticLibrary(
    target = "build/json",
    source = ["foreign/jsoncpp-0.5.0/src/lib_json/json_reader.cpp",
              "foreign/jsoncpp-0.5.0/src/lib_json/json_writer.cpp",
              "foreign/jsoncpp-0.5.0/src/lib_json/json_value.cpp"],
    CXXFLAGS = ["-fPIC"],
    CPPPATH = ["foreign/jsoncpp-0.5.0/include"])

Export(['env', 'prefix', 'json'])

# Library
library = env.SharedLibrary(
    target = "build/yappi",
    source = ["src/core.cpp", "src/engine.cpp", "src/registry.cpp", "src/sockets.cpp",
              "src/file_storage.cpp", "src/security.cpp"],
    CPPPATH = ["foreign/jsoncpp-0.5.0/include", "include"],
    LIBS = ["pthread", "dl", "uuid", "crypto", "boost_filesystem", "boost_thread", "zmq", 
            "ev", "msgpack", "uriparser", json],
    LINKFLAGS = ["-Wl,-soname=libyappi.so.1", "-Wl,-Bsymbolic"])

# Executable
binary = env.Program(
    target = "build/yappi",
    source = ["src/main.cpp"],
    CPPPATH = ["foreign/jsoncpp-0.5.0/include", "include"],
    LIBS = ["yappi", "boost_program_options"],
    LIBPATH = ["build"])

env.Requires(binary, library)

# Clients
SConscript("clients/sconscript")

# Plugins
plugins = SConscript("plugins/sconscript")

# Plugin development files
dev = env.File(["include/plugin.hpp", "include/uri.hpp", "clients/c++/client.hpp"])

# Python toolset
toolset = SConscript("toolset/sconscript")

env.InstallAs(prefix + "/usr/lib/libyappi.so.1", library)
env.Install(prefix + "/usr/bin", binary)
env.Install(prefix + "/usr/lib/yappi", plugins)
env.Install(prefix + "/usr/include/yappi", dev)
env.Install(prefix + "/usr/lib/" + python_version + "/site-packages/yappi", toolset)
