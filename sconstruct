#!/usr/bin/scons

prefix = ARGUMENTS.get("PREFIX", "")

env = Environment()

env.Alias("install", '.')

env.Append(CXXFLAGS = ["-g", "-O2", "-Wall", "-pthread", "-rdynamic"])

Export(['env', 'prefix'])

json = env.StaticLibrary(
    target = "build/json",
    source = ["foreign/jsoncpp-0.5.0/src/lib_json/json_reader.cpp",
              "foreign/jsoncpp-0.5.0/src/lib_json/json_writer.cpp",
              "foreign/jsoncpp-0.5.0/src/lib_json/json_value.cpp"],
    CXXFLAGS = ["-fPIC"],
    CPPPATH = ["foreign/jsoncpp-0.5.0/include"])

library = env.SharedLibrary(
    target = "build/yappi",
    source = ["src/registry.cpp", "src/engine.cpp", "src/core.cpp"],
    CPPPATH = ["foreign/jsoncpp-0.5.0/include", "include"],
    LIBS = ["zmq", "ev", "crypto", "uriparser", json],
    LINKFLAGS = ["-Wl,-soname=libyappi.so.1", "-Wl,-Bsymbolic"])

binary = env.Program(
    target = "build/yappi",
    source = ["src/main.cpp"],
    CPPPATH = ["foreign/jsoncpp-0.5.0/include", "include"],
    LIBS = ["yappi"],
    LIBPATH = ["build"])

dev = env.File(["include/plugin.hpp", "include/uri.hpp"])

env.Requires(binary, library)

plugins = SConscript("plugins/sconscript")

env.Install(prefix + "/usr/bin", binary)
env.InstallAs(prefix + "/usr/lib/libyappi.so.1", library)
env.Install(prefix + "/usr/include/yappi", dev)
env.Install(prefix + "/usr/lib/yappi", plugins)
